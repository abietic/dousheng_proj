// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publishservice

import (
	"context"
	publish "dousheng/publish/kitex_gen/publish"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceServiceInfo
}

var publishServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PublishService"
	handlerType := (*publish.PublishService)(nil)
	methods := map[string]kitex.MethodInfo{
		"PublishVideo": kitex.NewMethodInfo(publishVideoHandler, newPublishServicePublishVideoArgs, newPublishServicePublishVideoResult, false),
		"ListVideos":   kitex.NewMethodInfo(listVideosHandler, newPublishServiceListVideosArgs, newPublishServiceListVideosResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "publish",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServicePublishVideoArgs)
	realResult := result.(*publish.PublishServicePublishVideoResult)
	success, err := handler.(publish.PublishService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServicePublishVideoArgs() interface{} {
	return publish.NewPublishServicePublishVideoArgs()
}

func newPublishServicePublishVideoResult() interface{} {
	return publish.NewPublishServicePublishVideoResult()
}

func listVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*publish.PublishServiceListVideosArgs)
	realResult := result.(*publish.PublishServiceListVideosResult)
	success, err := handler.(publish.PublishService).ListVideos(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishServiceListVideosArgs() interface{} {
	return publish.NewPublishServiceListVideosArgs()
}

func newPublishServiceListVideosResult() interface{} {
	return publish.NewPublishServiceListVideosResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PublishVideo(ctx context.Context, req *publish.PublishVideoRequest) (r *publish.PublishVideoResponse, err error) {
	var _args publish.PublishServicePublishVideoArgs
	_args.Req = req
	var _result publish.PublishServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListVideos(ctx context.Context, req *publish.ListVideosRequest) (r *publish.ListVideosResponse, err error) {
	var _args publish.PublishServiceListVideosArgs
	_args.Req = req
	var _result publish.PublishServiceListVideosResult
	if err = p.c.Call(ctx, "ListVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
