version: '2'

networks:
  app-tier:
    driver: bridge
  cluster-redis-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

services:
  dousheng_auth:
    build:
      context: dousheng_auth
      target: run
    volumes:
      - ./dousheng_auth/config-indocker.yaml:/config.yaml
    depends_on:
      - mysql
      - Etcd
      - jaeger
      - mongo
    networks:
      - app-tier
  dousheng_userinfo:
    build:
      context: dousheng_userinfo
      target: run
    volumes:
      - ./dousheng_userinfo/config-indocker.yaml:/config.yaml
    depends_on:
      - mysql
      - Etcd
      - jaeger
      - mongo
    networks:
      - app-tier
  dousheng_publish:
    build:
      context: dousheng_publish
      target: run
    volumes:
      - ./dousheng_publish/config-indocker.yaml:/config.yaml
    depends_on:
      - mysql
      - Etcd
      - jaeger
      - mongo
    networks:
      - app-tier
  dousheng_router:
    build:
      context: dousheng_router
      target: run
    volumes:
      - ./dousheng_router/config-indocker.yaml:/config.yaml
    ports:
      - 8888:8888
    depends_on:
      - mysql
      - Etcd
      - jaeger
      - mongo
    networks:
      - app-tier
  Etcd:
    image: 'bitnami/etcd:3.4'
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      # - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - 2379:2379
      - 2380:2380
    volumes:
      - ./etcd/config:/opt/bitnami/Etcd/conf/etcd.conf.yml
    networks:
      - app-tier
  mysql:
    image: 'mysql:5.7'
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
      - ./mysql/config:/etc/mysql/conf.d
    ports:
      - 9910:3306
    environment:
      - MYSQL_DATABASE=dousheng
      - MYSQL_ROOT_PASSWORD=123456
      # - MYSQL_USER=gorm
      # - MYSQL_PASSWORD=gorm
      # - MYSQL_RANDOM_ROOT_PASSWORD="yes"
    networks:
      - app-tier
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - app-tier
  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1
    networks:
      - app-tier
  mongo:
    image: mongo:6.0
    # restart: always
    ports:
      - 27017:27017
    volumes:
      - ./mongodb/db:/data/db
      - ./mongodb/configdb:/data/configdb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 123456
    networks:
      - app-tier

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: 123456
      ME_CONFIG_MONGODB_URL: mongodb://root:123456@mongo:27017/
    depends_on:
      - mongo
    networks:
      - app-tier
  cache:
    image: redis:5
    ports:
      - 6379:6379
    volumes:
      - ./redis/conf/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/data
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    networks:
      - app-tier
  minio:
    image: minio/minio
    ports:
      - 9001:9001
      - 9000:9000
    volumes:
      - ./minio/data:/data
    command: [ "minio", "server", "/data", "--console-address", ":9001" ]
    networks:
      - app-tier
  
  envoy:
    image: envoyproxy/envoy:contrib-dev
    ports:
      - 8001:8001
      - 1999:1999
    volumes:
      # - ./envoy/config/envoy.yaml:/etc/envoy/envoy.yaml
      - ./envoy/config/envoy-cluster.yaml:/etc/envoy/envoy.yaml
      - ./envoy/config/build-cluster-proxy.sh:/run.sh
      - ./envoy/bin/redis-cli:/bin/redis-cli
    command: [ "bash", "/run.sh" ]
    networks:
      - app-tier
      - cluster-redis-net
    depends_on:
      - redis-1

  # 如果构建后还未设置redis cluster需要运行命令构成cluster
  # redis-cli -a 123456 --cluster create 173.17.0.2:6379 173.17.0.3:6379 173.17.0.4:6379 \
  # 173.17.0.5:6379 173.17.0.6:6379 173.17.0.7:6379 \
  # --cluster-replicas 1
  redis-1:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-1-data:/data"
      # - "./redis/redis-cluster/build-cluster.sh:/data/run.sh"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.2
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    # command: [ "bash", "./run.sh" ]
    depends_on:
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6

  redis-2:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-2-data:/data"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.3
    command: [ "redis-server", "/etc/redis/redis.conf" ]

  redis-3:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-3-data:/data"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.4
    command: [ "redis-server", "/etc/redis/redis.conf" ]

  redis-4:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-4-data:/data"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.5
    command: [ "redis-server", "/etc/redis/redis.conf" ]

  redis-5:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-5-data:/data"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.6
    command: [ "redis-server", "/etc/redis/redis.conf" ]

  redis-6:
    image: redis:5
    volumes:
      - "./redis/redis-cluster/redis-6-data:/data"
      - "./redis/redis-cluster/redis.conf:/etc/redis/redis.conf"
    networks:
      cluster-redis-net:
        ipv4_address: 173.17.0.7
    command: [ "redis-server", "/etc/redis/redis.conf" ]


