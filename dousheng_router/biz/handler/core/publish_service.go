// Code generated by hertz generator.

package core

import (
	"context"
	"strconv"

	"dousheng/router/biz/model/common"
	core "dousheng/router/biz/model/core"
	"dousheng/router/dal/minioc"
	"dousheng/router/kitex_gen/publish"
	"dousheng/router/kitex_gen/userinfo"

	"dousheng/common/errno"
	"dousheng/router/jwtmiddleware"
	"dousheng/router/rpc"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/cloudwego/hertz/pkg/common/hlog"
	jwtextra "github.com/hertz-contrib/jwt"
)

const (
	defaultCoverUrl = "https://i.kym-cdn.com/entries/icons/original/000/018/215/cover8.jpg"
)

// PublishActionHandler .
// @router /douyin/publish/action/ [POST]
func PublishActionHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.DouyinPublishActionResponse)

	// 读出token的数据
	tk, err := jwtmiddleware.AuthMiddleware.ParseTokenString(*req.Token)
	if err != nil {
		var errCode int32 = errno.AuthorizationFailedErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.AuthorizationFailedErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	claims := jwtextra.ExtractClaimsFromToken(tk)
	authorID, err := strconv.ParseInt(claims[jwtmiddleware.UserIDKey].(string), 10, 64)
	if err != nil {
		var errCode int32 = errno.AuthorizationFailedErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.AuthorizationFailedErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	// data, err := c.FormFile("data")
	// if err != nil {
	// 	resp.StatusCode = &failStatusCode
	// 	errMsg := err.Error()
	// 	resp.StatusMsg = &errMsg
	// 	c.JSON(consts.StatusOK, resp)
	// 	return
	// }
	data := req.Data

	playUrl, err := minioc.SaveVideoFile(ctx, uint64(authorID), req.GetTitle(), data)
	if err != nil {
		hlog.Error(err)
		var errCode int32 = errno.SaveVideoFileErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.SaveVideoFileErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	// saveFile := filepath.Join("./public/", finalName)
	// if err := c.SaveUploadedFile(data, saveFile); err != nil {
	// 	resp.StatusCode = &failStatusCode
	// 	errMsg := err.Error()
	// 	resp.StatusMsg = &errMsg
	// 	c.JSON(consts.StatusOK, resp)
	// 	return
	// }

	_, err = rpc.PublishVideo(ctx, &publish.PublishVideoRequest{
		VideoUrl: playUrl,
		CoverUrl: defaultCoverUrl,
		Title:    req.GetTitle(),
		UserId:   authorID,
	})
	if err != nil {
		hlog.Error(err)
		var errCode int32 = errno.PublishVideoErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.PublishVideoErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	var sucCode int32 = errno.SuccessCode
	resp.StatusCode = &sucCode
	resp.StatusMsg = &errno.Success.ErrMsg

	// resp.StatusCode = new(int32)
	// successMsg := finalName + " uploaded successfully"
	// resp.StatusMsg = &successMsg

	c.JSON(consts.StatusOK, resp)
}

// PublishListHandler .
// @router /douyin/publish/list/ [GET]
func PublishListHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(core.DouyinPublishListResponse)
	// 读出token的数据
	tk, err := jwtmiddleware.AuthMiddleware.ParseTokenString(*req.Token)
	if err != nil {
		var errCode int32 = errno.AuthorizationFailedErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.AuthorizationFailedErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	claims := jwtextra.ExtractClaimsFromToken(tk)
	visitorID, err := strconv.ParseInt(claims[jwtmiddleware.UserIDKey].(string), 10, 64)
	hostID := req.GetUserId()
	if err != nil {
		var errCode int32 = errno.AuthorizationFailedErrCode
		resp.StatusCode = &errCode
		resp.StatusMsg = &errno.AuthorizationFailedErr.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	videoInfos, err := rpc.ListPublished(ctx, &publish.ListVideosRequest{VisitorUserId: visitorID, HostUserId: hostID})
	if err != nil {
		errNo := errno.ConvertErr(err)
		var errCode int32 = int32(errNo.ErrCode)
		resp.StatusCode = &errCode
		resp.StatusMsg = &errNo.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	userInfo, err := rpc.GetUserInfo(ctx, &userinfo.UesrInfoRequest{VisitorUserId: visitorID, HostUserId: hostID})
	if err != nil {
		errNo := errno.ConvertErr(err)
		var errCode int32 = int32(errNo.ErrCode)
		resp.StatusCode = &errCode
		resp.StatusMsg = &errNo.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	author := &common.User{
		Id:              &hostID,
		Name:            &userInfo.Username,
		FollowCount:     &userInfo.FollowCount,
		FollowerCount:   &userInfo.FollowCount,
		IsFollow:        &userInfo.IsFollow,
		Avatar:          &userInfo.Avatar,
		BackgroundImage: &userInfo.BackgroundImage,
		Signature:       &userInfo.Signature,
		TotalFavorited:  &userInfo.TotalFavorited,
		WorkCount:       &userInfo.WorkCount,
		FavoriteCount:   &userInfo.FavoriteCount,
	}

	vll := len(videoInfos)

	videoList := make([]*common.Video, vll)

	for i := 0; i < vll; i++ {
		videoList[i] = &common.Video{
			Id:            &videoInfos[i].VideoId,
			Author:        author,
			PlayUrl:       &videoInfos[i].PlayUrl,
			CoverUrl:      &videoInfos[i].CoverUrl,
			FavoriteCount: &videoInfos[i].FavoriteCount,
			CommentCount:  &videoInfos[i].CommentCount,
			IsFavorite:    &videoInfos[i].IsFavorite,
			Title:         &videoInfos[i].Title,
		}
	}

	var sucCode int32 = errno.SuccessCode
	resp.StatusCode = &sucCode
	resp.StatusMsg = &errno.Success.ErrMsg
	resp.VideoList = videoList

	c.JSON(consts.StatusOK, resp)
}
