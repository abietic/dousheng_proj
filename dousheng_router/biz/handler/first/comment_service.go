// Code generated by hertz generator.

package first

import (
	"context"

	handler "dousheng/router/biz/handler"
	core "dousheng/router/biz/handler/core"
	common "dousheng/router/biz/model/common"
	first "dousheng/router/biz/model/extra/first"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CommentActionHandler .
// @router /douyin/comment/action/ [POST]
func CommentActionHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req first.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(first.DouyinCommentActionResponse)

	var failStatusCode int32 = 1
	var failStatusMsg = "User doesn't exist"

	if user, exist := core.UsersLoginInfo[*req.Token]; exist {
		if *req.ActionType == 1 {
			// text := c.Query("comment_text")
			// c.JSON(http.StatusOK, CommentActionResponse{Response: Response{StatusCode: 0},
			// 	Comment: Comment{
			// 		Id:         1,
			// 		User:       user,
			// 		Content:    text,
			// 		CreateDate: "05-01",
			// 	}})
			resp.StatusCode = new(int32)
			var id int64 = 1
			var createDate = "05-01"
			resp.Comment = &common.Comment{
				Id:         &id,
				User:       &user,
				Content:    req.CommentText,
				CreateDate: &createDate,
			}
		} else {
			resp.StatusCode = new(int32)
		}

	} else {
		resp.StatusCode = &failStatusCode
		resp.StatusMsg = &failStatusMsg
	}

	c.JSON(consts.StatusOK, resp)
}

// CommentListHandler .
// @router /douyin/comment/list/ [GET]
func CommentListHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req first.DouyinCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(first.DouyinCommentListResponse)

	resp.StatusCode = new(int32)
	resp.CommentList = handler.DemoComments

	c.JSON(consts.StatusOK, resp)
}
