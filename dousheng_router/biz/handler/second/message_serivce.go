// Code generated by hertz generator.

package second

import (
	"context"

	core "dousheng/router/biz/handler/core"
	common "dousheng/router/biz/model/common"
	second "dousheng/router/biz/model/extra/second"
	"fmt"
	"sync/atomic"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var tempChat = map[string][]*common.Message{}

var messageIdSequence = int64(1)

func genChatKey(userIdA int64, userIdB int64) string {
	if userIdA > userIdB {
		return fmt.Sprintf("%d_%d", userIdB, userIdA)
	}
	return fmt.Sprintf("%d_%d", userIdA, userIdB)
}

// MessageActionHandler .
// @router /douyin/message/action/ [POST]
func MessageActionHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinMessageActionResponse)

	var failStatusCode int32 = 1
	var failStatusMsg = "User doesn't exist"

	if user, exist := core.UsersLoginInfo[req.GetToken()]; exist {
		userIdB := req.GetToUserId()
		chatKey := genChatKey(user.GetId(), int64(userIdB))

		createTime := time.Now().Format(time.Kitchen)

		messageId := atomic.AddInt64(&messageIdSequence, 1)
		curMessage := common.Message{
			Id:         &messageId,
			Content:    req.Content,
			CreateTime: &createTime,
		}

		if messages, exist := tempChat[chatKey]; exist {
			tempChat[chatKey] = append(messages, &curMessage)
		} else {
			tempChat[chatKey] = []*common.Message{&curMessage}
		}
		resp.StatusCode = new(int32)
	} else {
		resp.StatusCode = &failStatusCode
		resp.StatusMsg = &failStatusMsg
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageChatHandler .
// @router /douyin/message/chat/ [GET]
func MessageChatHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinMessageChatResponse)

	var failStatusCode int32 = 1
	var failStatusMsg = "User doesn't exist"

	if user, exist := core.UsersLoginInfo[req.GetToken()]; exist {
		userIdB := req.GetToUserId()
		chatKey := genChatKey(user.GetId(), int64(userIdB))

		resp.StatusCode = new(int32)
		resp.MessageList = tempChat[chatKey]

	} else {
		resp.StatusCode = &failStatusCode
		resp.StatusMsg = &failStatusMsg
	}

	c.JSON(consts.StatusOK, resp)
}
