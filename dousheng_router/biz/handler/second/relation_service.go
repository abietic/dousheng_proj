// Code generated by hertz generator.

package second

import (
	"context"

	handler "dousheng/router/biz/handler"
	core "dousheng/router/biz/handler/core"
	common "dousheng/router/biz/model/common"
	second "dousheng/router/biz/model/extra/second"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationActionHandler .
// @router /douyin/relation/action/ [POST]
func RelationActionHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinRelationActionResponse)

	var failStatusCode int32 = 1
	var failStatusMsg = "User doesn't exist"

	if _, exist := core.UsersLoginInfo[*req.Token]; exist {
		resp.StatusCode = new(int32)
	} else {
		resp.StatusCode = &failStatusCode
		resp.StatusMsg = &failStatusMsg
	}

	c.JSON(consts.StatusOK, resp)
}

// FollowListHandler .
// @router /douyin/relation/follow/list/ [GET]
func FollowListHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinRelationFollowListResponse)

	resp.StatusCode = new(int32)

	resp.UserList = []*common.User{&handler.DemoUser}

	c.JSON(consts.StatusOK, resp)
}

// FollowerListHandler .
// @router /douyin/relation/follower/list/ [GET]
func FollowerListHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinRelationFollowerListResponse)

	resp.StatusCode = new(int32)

	resp.UserList = []*common.User{&handler.DemoUser}

	c.JSON(consts.StatusOK, resp)
}

// FriendListHandler .
// @router /douyin/relation/friend/list/ [GET]
func FriendListHandler(ctx context.Context, c *app.RequestContext) {
	var err error
	var req second.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(second.DouyinRelationFriendListResponse)

	resp.StatusCode = new(int32)

	var friend = common.FriendUser{
		Id:              handler.DemoUser.Id,
		Name:            handler.DemoUser.Name,
		FollowCount:     handler.DemoUser.FollowCount,
		FollowerCount:   handler.DemoUser.FollowerCount,
		IsFollow:        handler.DemoUser.IsFollow,
		Avatar:          handler.DemoUser.Avatar,
		BackgroundImage: handler.DemoUser.BackgroundImage,
		Signature:       handler.DemoUser.Signature,
		TotalFavorited:  handler.DemoUser.TotalFavorited,
		WorkCount:       handler.DemoUser.WorkCount,
		FavoriteCount:   handler.DemoUser.FavoriteCount,
	}

	resp.UserList = []*common.FriendUser{&friend}

	c.JSON(consts.StatusOK, resp)
}
