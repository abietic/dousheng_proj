// Code generated by hertz generator.

package main

import (
	"context"
	// "fmt"

	"dousheng/common/config"
	recoveryfunc "dousheng/common/recovery"
	"dousheng/common/tracer"
	"dousheng/router/rpc"

	// "dousheng/common/errno"

	"dousheng/router/dal"
	"dousheng/router/jwtmiddleware"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"

	// "github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	routerconsts "dousheng/router/constants"

	pprof "github.com/hertz-contrib/pprof"
)

func Init() {
	config.LoadConfig("./config.yaml")
	// tracer.InitJaeger(constants.ApiServiceName)
	// tracer.InitJaeger(ApiServiceName)
	tracer.InitJaegerWithConfig(routerconsts.ApiServiceName)
	rpc.InitRPC()
	dal.Init()
}

func main() {
	// h := server.Default(server.WithMaxRequestBodySize(20 << 20) /*20MB*/)

	// h.Use(logger.AccessLog())
	// pprof.Register(h)
	// register(h)
	// h.Spin()

	Init()
	jwtmiddleware.Init()
	r := server.New(
		// server.WithHostPorts("0.0.0.0:8888"),
		server.WithHostPorts(config.Configs.HertzConfig.HostPorts),
		server.WithHandleMethodNotAllowed(true),
		// server.WithMaxRequestBodySize(20<<20), /*20MB*/
		server.WithMaxRequestBodySize(config.Configs.HertzConfig.MaxRequestBodySizeMB<<20),
	)

	r.Use(recovery.Recovery(recovery.WithRecoveryHandler(recoveryfunc.HertzRecoveryFunc)))

	pprof.Register(r)
	r.NoRoute(func(ctx context.Context, c *app.RequestContext) {
		c.String(consts.StatusOK, "no route")
	})
	r.NoMethod(func(ctx context.Context, c *app.RequestContext) {
		c.String(consts.StatusOK, "no method")
	})
	register(r)
	r.Spin()
}
