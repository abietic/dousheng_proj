// Code generated by Kitex v0.7.1. DO NOT EDIT.

package userauthservice

import (
	"context"
	auth "dousheng/router/kitex_gen/auth"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userAuthServiceServiceInfo
}

var userAuthServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserAuthService"
	handlerType := (*auth.UserAuthService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newUserAuthServiceRegisterArgs, newUserAuthServiceRegisterResult, false),
		"Login":    kitex.NewMethodInfo(loginHandler, newUserAuthServiceLoginArgs, newUserAuthServiceLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "auth",
		"ServiceFilePath": "../dousheng_idl/auth/auth.thrift",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.UserAuthServiceRegisterArgs)
	realResult := result.(*auth.UserAuthServiceRegisterResult)
	success, err := handler.(auth.UserAuthService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserAuthServiceRegisterArgs() interface{} {
	return auth.NewUserAuthServiceRegisterArgs()
}

func newUserAuthServiceRegisterResult() interface{} {
	return auth.NewUserAuthServiceRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*auth.UserAuthServiceLoginArgs)
	realResult := result.(*auth.UserAuthServiceLoginResult)
	success, err := handler.(auth.UserAuthService).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserAuthServiceLoginArgs() interface{} {
	return auth.NewUserAuthServiceLoginArgs()
}

func newUserAuthServiceLoginResult() interface{} {
	return auth.NewUserAuthServiceLoginResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *auth.RegisterRequest) (r *auth.RegisterResponse, err error) {
	var _args auth.UserAuthServiceRegisterArgs
	_args.Req = req
	var _result auth.UserAuthServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *auth.LoginRequest) (r *auth.LoginResponse, err error) {
	var _args auth.UserAuthServiceLoginArgs
	_args.Req = req
	var _result auth.UserAuthServiceLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
